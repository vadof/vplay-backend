version: '3.9'

services:

  postgres:
    container_name: ${POSTGRES_CONTAINER_NAME}
    image: postgres:16rc1
    networks:
      - vcasino
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - db:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${USER_SERVICE_DATABASE} -p ${POSTGRES_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    container_name: redis
    image: redis:7.4
    networks:
      - vcasino
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "my_password"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "-p", "6379", "PING" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
      disable: false
      
  zookeeper:
    container_name: ${ZOOKEEPER_CONTAINER_NAME}
    image: zookeeper:3.9.2
    networks:
      - vcasino
    restart: no
    ports:
      - '${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}'
    healthcheck:
      test: nc -z 127.0.0.1 ${ZOOKEEPER_PORT} || exit -1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  kafka:
    container_name: ${KAFKA_CONTAINER_NAME}
    image: confluentinc/cp-kafka:7.7.0
    networks:
      - vcasino
    restart: no
    ports:
      - '${KAFKA_PORT_1}:${KAFKA_PORT_1}'
      - '${KAFKA_PORT_2}:${KAFKA_PORT_2}'
    volumes:
      - kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER_INTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: DOCKER_INTERNAL://:${KAFKA_PORT_2},DOCKER_EXTERNAL://:${KAFKA_PORT_1}
      KAFKA_ADVERTISED_LISTENERS: DOCKER_INTERNAL://kafka:${KAFKA_PORT_2},DOCKER_EXTERNAL://kafka:${KAFKA_PORT_1}
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:${KAFKA_PORT_1} --list
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5

  kafka_ui:
    container_name: ${KAFKA_UI_CONTAINER_NAME}
    image: provectuslabs/kafka-ui:v0.7.2
    networks:
      - vcasino
    restart: no
    ports:
      - "${KAFKA_UI_PORT_1}:${KAFKA_UI_PORT_2}"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:${KAFKA_PORT_1}
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:${ZOOKEEPER_PORT}

  eureka-server:
    container_name: ${EUREKA_CONTAINER_NAME}
    build: ../../eureka-server
    networks:
      - vcasino
    ports:
      - '${EUREKA_PORT}:${EUREKA_PORT}'
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://eureka-server:${EUREKA_PORT}/actuator/health | grep UP || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  user-service:
    container_name: ${USER_SERVICE_CONTAINER_NAME}
    build: ../../user-service
    networks:
      - vcasino
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:${POSTGRES_PORT}/${USER_SERVICE_DATABASE}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT_2}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${EUREKA_INSTANCE_HOSTNAME}:${EUREKA_PORT}/eureka
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  clicker-service:
    container_name: ${CLICKER_SERVICE_CONTAINER_NAME}
    build: ../../clicker-service
    networks:
      - vcasino
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:${POSTGRES_PORT}/${CLICKER_SERVICE_DATABASE}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT_2}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${EUREKA_INSTANCE_HOSTNAME}:${EUREKA_PORT}/eureka
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy

  api-gateway:
    container_name: ${API_GATEWAY_CONTAINER_NAME}
    build: ../../api-gateway
    networks:
      - vcasino
    ports:
      - '${API_GATEWAY_PORT}:${API_GATEWAY_PORT}'
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${EUREKA_INSTANCE_HOSTNAME}:${EUREKA_PORT}/eureka
    depends_on:
      eureka-server:
        condition: service_healthy

networks:
  vcasino:
    driver: bridge

volumes:
  db:
  kafka_data:
